{{ define "title"}}<title>Users</title>{{ end }}
      
{{ define "content"}}
  <h1 class="text-2xl mx-auto">Users</h1>

  {{ template "popup" . }}

  <!-- https://play.tailwindcss.com/haDGueJm6h -->
  <form id="user-list" class="m-2" hx-ext="json-enc" hx-indicator="#spinner" hx-disabled-elt="input, button" autocomplete="off" x-data="userListState">
    <div class="flex mb-2 gap-2">
      <a href="/users/form">
        <button type="button" class="flex gap-2 border-2 rounded-md shadow-sm border-slate-300 w-fit p-2">
          New
        </button>
      </a>
      <button 
        :class="`${checkedCount.length===0?'opacity-50':''} flex gap-2 border-2 rounded-md shadow-sm border-slate-300 w-fit p-2 text-red-500`"
        type="button"
        hx-delete="/users"
        hx-vals="js:{ids:getIdsAsArray()}"
        hx-confirm="Click confirm to delete"
        :disabled="checkedCount.length===0"
      >
        Delete <span x-show="checkedCount.length>0" x-text="`(${checkedCount.length})`"></span>
        <div id="spinner" class="htmx-indicator animate-spin w-5 h-5 rounded-full m-auto border-2 border-solid border-slate-500 border-t-transparent"></div>
      </button>
      <button 
        class="flex gap-2 border-2 rounded-md shadow-sm border-slate-300 w-fit p-2 ml-auto"
        type="button"
        hx-target="#popupMessage"
        hx-patch="/users"
        hx-ext="submit-array"
        hx-swap="outerHTML"
      >
        Update
        <div id="spinner" class="htmx-indicator animate-spin w-5 h-5 rounded-full m-auto border-2 border-solid border-slate-500 border-t-transparent"></div>
      </button>
    </div>

    {{ template "list" . }}
  </form>

  <script>
    function getIdsAsArray() {
      // Get all the checked checkboxes
      const checkboxes = document.querySelectorAll('input[type="checkbox"][name="ids"]:checked');

      // Create an array to store the selected ids
      const ids = [];

      // Loop through the checkboxes and add the ids to the array
      checkboxes.forEach(function(checkbox) {
        ids.push(checkbox.value);
      });

      // Create the request JSON
      const requestData = {
        ids: ids.length > 0 ? ids : [] // Ensure that the ids property is always an array
      };

      return ids;
    }

    function getDisabledForUpdate() {
      // Get all the checkboxes
      const checkboxes = document.querySelectorAll('input[type="checkbox"][name="disabled"]');
      const results = [];

      checkboxes.forEach(function(checkbox) {
        results.push({id:checkbox.id,name:checkbox.value,disabled:checkbox.checked});
      });

      //console.log("results:", results)
      return results;
    }

    htmx.defineExtension('submit-array', {
      onEvent: function (name, evt) {
        if (name === "htmx:configRequest") {
          evt.detail.headers['Content-Type'] = "application/json"
        }
      },
      encodeParameters: function(xhr, parameters, elt) {
        xhr.overrideMimeType('application/json') // override default mime type
        const body = getDisabledForUpdate()
        return (JSON.stringify(body))
      }
    })

    function userListState(){
      return {
        checkedCount: [],
        handleCheck: function (e){
          if (e.target.checked)
            this.checkedCount.push(e.target.value)
          else
            this.checkedCount.splice(this.checkedCount.findIndex((checked)=>checked===e.target.value),1)
          
          //console.log("checkedCount",this.checkedCount.length)
        },
        toggleSelectAll: function(){
          const selectAllCheckbox = document.getElementById("selectAll")
          const checkboxes = document.querySelectorAll('input[type="checkbox"][name="ids"]');
            checkboxes.forEach((checkbox) => {
              if (selectAllCheckbox.checked){
                !checkbox.checked && this.checkedCount.push(checkbox.value)
                checkbox.checked = true
              }else{
                checkbox.checked = false
                this.checkedCount.splice(0,this.checkedCount.length)
              }
            });
        }
      }
    }
  </script>
{{end}}

{{ define "footer" }}<div></div>{{ end }}
