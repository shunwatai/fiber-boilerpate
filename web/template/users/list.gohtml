{{ define "title"}}<title>Users</title>{{ end }}
      
{{ define "content"}}
  <h1 class="text-2xl mx-auto">Users</h1>

  {{ template "errorDialog" . }}

  <!-- https://play.tailwindcss.com/haDGueJm6h -->
  <form id="user-list" class="m-2" hx-ext="json-enc" hx-indicator="#spinner" hx-disabled-elt="input, button">
    <div class="flex mb-2 gap-2">
      <a href="/users/form">
        <button type="button" class="flex gap-2 border-2 rounded-md shadow-sm border-slate-300 w-fit p-2">
          New
        </button>
      </a>
      <button 
        class="flex gap-2 border-2 rounded-md shadow-sm border-slate-300 w-fit p-2"
        type="button"
        hx-delete="/users"
        hx-vals="js:{ids:getIdsAsArray()}"
      >
        Delete
        <div id="spinner" class="htmx-indicator animate-spin w-5 h-5 rounded-full m-auto border-2 border-solid border-slate-500 border-t-transparent"></div>
      </button>
      <button 
        class="flex gap-2 border-2 rounded-md shadow-sm border-slate-300 w-fit p-2 ml-auto"
        type="button"
        hx-target-5*="#errorMessage"
        hx-target="#successMessage"
        hx-patch="/users"
        hx-ext="submit-array"
      >
        Update
        <div id="spinner" class="htmx-indicator animate-spin w-5 h-5 rounded-full m-auto border-2 border-solid border-slate-500 border-t-transparent"></div>
      </button>
    </div>
    <table class="w-full table-auto border-collapse border border-slate-500 [&>tbody>*:nth-child(even)]:bg-slate-100">
      <tr class="bg-slate-400">
        <th class="border border-slate-600 text-center"></th>
        <th class="border border-slate-600 text-center">login name</th>
        <th class="border border-slate-600 text-center">email</th>
        <th class="border border-slate-600 text-center">first name</th>
        <th class="border border-slate-600 text-center">last name</th>
        <th class="border border-slate-600 text-center">disabled</th>
      </tr>
      {{- range .users }}
      <tr>
        <td class="border border-slate-700 text-center"><input type="checkbox" name="ids" value={{.Id}} /></td>
        <td class="border border-slate-700 text-center"><a class="block" href="/users/form?userId={{.Id}}">{{.Name}}</a></td>
        <td class="border border-slate-700 text-center"><a class="block" href="/users/form?userId={{.Id}}">{{.Email}}</a></td>
        <td class="border border-slate-700 text-center"><a class="block" href="/users/form?userId={{.Id}}">{{if .FirstName}}{{.FirstName}}{{else}}&nbsp{{end}}</a></td>
        <td class="border border-slate-700 text-center"><a class="block" href="/users/form?userId={{.Id}}">{{if .LastName}}{{.LastName}}{{else}}&nbsp{{end}}</a></td>
        <td class="border border-slate-700 text-center"><input type="checkbox" name="disabled" id={{.Id}} value={{.Name}} {{ if .Disabled }} checked {{end}} /></td>
      </tr>
      {{- end }}
    </table>
  </form>

  <script>
    function getIdsAsArray() {
      // Get all the checked checkboxes
      const checkboxes = document.querySelectorAll('input[type="checkbox"][name="ids"]:checked');

      // Create an array to store the selected ids
      const ids = [];

      // Loop through the checkboxes and add the ids to the array
      checkboxes.forEach(function(checkbox) {
        ids.push(checkbox.value);
      });

      // Create the request JSON
      const requestData = {
        ids: ids.length > 0 ? ids : [] // Ensure that the ids property is always an array
      };

      return ids;
    }

    function getDisabledForUpdate() {
      // Get all the checkboxes
      const checkboxes = document.querySelectorAll('input[type="checkbox"][name="disabled"]');
      const results = [];

      checkboxes.forEach(function(checkbox) {
        results.push({id:checkbox.id,name:checkbox.value,disabled:checkbox.checked});
      });

      //console.log("results:", results)
      return results;
    }

    htmx.defineExtension('submit-array', {
      onEvent: function (name, evt) {
        if (name === "htmx:configRequest") {
          evt.detail.headers['Content-Type'] = "application/json"
        }
      },
      encodeParameters: function(xhr, parameters, elt) {
        xhr.overrideMimeType('application/json') // override default mime type
        const body = getDisabledForUpdate()
        return (JSON.stringify(body))
      }
    })
  </script>
{{end}}

{{ define "footer" }}<div></div>{{ end }}

