package server

import (
	"fmt"
	"golang-api-starter/internal/config"
  "golang-api-starter/internal/modules/document"
  "golang-api-starter/internal/modules/qrcode"
  "golang-api-starter/internal/modules/todo"
  "golang-api-starter/internal/modules/todoDocument"
  "golang-api-starter/internal/modules/user"
	"log"

	_ "golang-api-starter/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/swagger" // swagger handler
)

type Fiber struct {
	App *fiber.App
}

func (f *Fiber) GetApp() {
	f.App = fiber.New(fiber.Config{
		// Prefork:       true,
		CaseSensitive: true,
		StrictRouting: false,
		ServerHeader:  "Fiber",
		BodyLimit:     500 << 20, // 500Mb
	})
}

func (f *Fiber) LoadMiddlewares() {
	f.App.Use(logger.New())
	f.App.Use(recover.New())
	f.App.Use(cors.New(cors.Config{
		AllowOrigins:     "http://localhost",
		AllowHeaders:     "Origin, Content-Type, Accept",
		AllowCredentials: true,
	}))
}

func (f *Fiber) LoadSwagger() {
	config := config.Cfg
	config.LoadEnvVariables()

	/* for swagger web */
	serverUrl := fmt.Sprintf("http://%s/swagger/doc.json", fmt.Sprintf("%s:%s", config.ServerConf.Host, config.ServerConf.Port))
	f.App.Get("/swagger/*", swagger.HandlerDefault)
	f.App.Get("/swagger/*", swagger.New(swagger.Config{ // custom
		URL:         fmt.Sprintf("http://%s/doc.json", serverUrl),
		DeepLinking: false,
		// Expand ("list") or Collapse ("none") tag groups by default
		DocExpansion: "none",
		// Prefill OAuth ClientId on Authorize popup
		// OAuth: &swagger.OAuthConfig{
		// 	AppName:  "OAuth Provider",
		// 	ClientId: "21bb4edc-05a7-4afc-86f1-2e151e4ba6e2",
		// },
		// Ability to change OAuth2 redirect uri location
		// OAuth2RedirectUrl: fmt.Sprintf("http://%s:8080/swagger/oauth2-redirect.html", serverUrl),
	}))
}

func (f *Fiber) LoadAllRoutes() {
	api := f.App.Group("/api")
	document.GetRoutes(api)
	qrcode.GetRoutes(api)
	todo.GetRoutes(api)
	todoDocument.GetRoutes(api)
	user.GetRoutes(api)
}

func (f *Fiber) Start() {
	config := config.Cfg
	config.LoadEnvVariables()
	config.WatchConfig()

	fmt.Printf("server config: %+v\n", config.ServerConf)
	fmt.Printf("db config: %+v\n", config.DbConf)

	log.Fatal(f.App.Listen(fmt.Sprintf(":%s", config.ServerConf.Port)))
}

var Api = &Fiber{}
